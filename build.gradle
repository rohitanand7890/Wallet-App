import java.time.Duration

plugins {
	id 'org.springframework.boot' version '2.5.3'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'com.avast.gradle.docker-compose' version '0.14.9'
}

group = 'com.bitcoin'
version = '0.0.1-SNAPSHOT'
//sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.5.4'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.5.4'

	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.5.10'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.5.4'

	testImplementation 'junit:junit:4.12'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.3.2'
}


dockerCompose {
	useComposeFiles = ['docker-compose-test.yml']
	isRequiredBy(project.tasks.test)
	waitForHealthyStateTimeout = Duration.ofMinutes(1)
	dockerComposeStopTimeout = java.time.Duration.ofSeconds(30)
}



import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.time.Duration

tasks.withType(Test) {
	testLogging {
		// set options for log level LIFECYCLE
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) { // will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}